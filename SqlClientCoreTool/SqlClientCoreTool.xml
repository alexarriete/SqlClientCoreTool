<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlClientCoreTool</name>
    </assembly>
    <members>
        <member name="T:SqlClientCoreTool.Classes.BlobFile">
            <summary>
            Any class inheriting from it will contains a property to store documents, images etc, in a sql table.
            See Transformer.CreateBlobFile(...)
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.Classes.BlobFile.Name">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.Classes.BlobFile.FileData">
            <summary>
            Property to store documents, images, etc.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.Classes.BlobFile.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="T:SqlClientCoreTool.Classes.IAR">
            <summary>
            When inheriting from it, any class in the database will have fields normally used in a sql Table; as well as its initialization.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.Classes.IAR.Active">
            <summary>
            This property will be initialized as true.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.Classes.IAR.RowUpdateDate">
            <summary>
            This property will be initialized with the current date
            </summary>
        </member>
        <member name="T:SqlClientCoreTool.Classes.Parameter">
            <summary>
            A string object value pair.
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.Classes.Parameter.ParameterList(System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Creates up to five parameters in a simple way.
            </summary>
            <param name="name1"></param>
            <param name="value1"></param>
            <param name="name2"></param>
            <param name="value2"></param>
            <param name="name3"></param>
            <param name="value3"></param>
            <param name="name4"></param>
            <param name="value4"></param>
            <param name="name5"></param>
            <param name="value5"></param>
            <returns></returns>
        </member>
        <member name="T:SqlClientCoreTool.Classes.SCCT_SessionLog">
            <summary>
            Class to create a log table to store temporal values.
            </summary>
        </member>
        <member name="T:SqlClientCoreTool.CurrentDatabase">
            <summary>
            Current working database
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.CurrentDatabaseSecurity">
            <summary>
            Deals with some rules to prevent undesirables changes in current database. 
            Specifics changes in CurrentDatabaseSecurity will rollback after the accion is donne.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.Name">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.ServerName">
            <summary>
            Server name.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.MdfName">
            <summary>
            Logical mdf Name
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.LogName">
            <summary>
            Logical log name
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.FullPathMdf">
            <summary>
            Mdf file full path
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.FullPathLog">
            <summary>
            Log file full path
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.Size">
            <summary>
            Database size (mb)
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabase.LastBackup">
            <summary>
            Database last backup
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.CurrentDatabase.Get(SqlClientCoreTool.DataGather)">
            <summary>
            Get Current Database
            </summary>
            <param name="dg">Datagather</param>
            <returns>A CurrentDatabase object</returns>
        </member>
        <member name="M:SqlClientCoreTool.CurrentDatabase.RestoreWithMove(System.String,System.Int32)">
            <summary>
            Restore current database with MOVE. Change files other location desired. 
            You must set CurrentDatabaseSecurity.AllowRestore to true, in every restore.
            </summary>
            <param name="targetPath">Copy to path</param>
            <param name="timeOut">Operation timeout</param>
            <returns>Message if error.</returns>
        </member>
        <member name="M:SqlClientCoreTool.CurrentDatabase.BackupWithCompression(System.String)">
            <summary>
            Backup current database to Disk WITH COMPRESSION. If opearation success property LastBackup will be updated.
            </summary>
            <param name="sourcePath">Source path of .back copy</param>
            <returns>Message if error.</returns>
        </member>
        <member name="T:SqlClientCoreTool.CurrentDatabaseSecurity">
            <summary>
            Deals with some rules to prevent undesirables changes in current database. 
            Specifics changes in CurrentDatabaseSecurity will rollback after the accion is donne.
            </summary>
        </member>
        <member name="P:SqlClientCoreTool.CurrentDatabaseSecurity.AllowRestore">
            <summary>
            Grant permission to restore database, once.
            </summary>
        </member>
        <member name="T:SqlClientCoreTool.DataGather">
            <summary>
            Creates a connection to the database and contains methods for CRUD operations
            Examples: https://sqlcct.acernuda.com
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetInstance(System.String,System.String)">
            <summary>
            Initializes a new connection to the database.
            </summary>
            <param name="connectionString">A Connectionstring obtained from config, setting, etc.</param>
            <param name="dataBaseName">Optional, dataBase name different to connectionstring DataBase.</param>
            <returns>Returns an instance of DataGather</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetBuilderInstance(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new connection to the database. If the username and password are not specified, it will try to connect through trusted Windows authentication.
            </summary>
            <param name="dataSource">Server instance name</param>
            <param name="dataBaseName">Inicial catalog name</param>
            <param name="userName">Database login uername</param>
            <param name="password">Database login password</param>
            <returns></returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetDataTable(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Returns a DataTable object resulting from the query to the database.
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns>System.Data.DataTable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetDataTableAsync(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Returns a DataTable object resulting from the query to the database.
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns>System.Data.DataTable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetDataTable``1(System.Int32,System.Int32)">
            <summary>
            Gets Table of T 
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <param name="limit">Number of rows. Empty or (0) for all rows</param>
            <param name="timeout">Remote query timeout </param>
            <returns>System.Data.DataTable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetDataTableAsync``1(System.Int32,System.Int32)">
            <summary>
            Gets Table of T 
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <param name="limit">Number of rows. Empty or (0) for all rows</param>
            <param name="timeout">Remote query timeout </param>
            <returns>System.Data.DataTable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.Get``1(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Gets a IEnumerable with the values ​​of the table generated by the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns><typeparamref name="T"/> IEnumerable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetAsync``1(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Gets an IEnumerable with the values ​​of the table generated by the query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns><typeparamref name="T"/> IEnumerable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetSubset``1(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>   
            <typeparam name="T"> Gets a subset of T</typeparam>
            </summary>
            <param name="numberOfRows">Number of rows</param>
            <param name="startRow">First row</param>
            <param name="field">you can sort by one field or by several separated by commas</param>
            <param name="timeout">Remote query timeout</param>
            <returns>Returns an ICollection of T </returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetSubsetAsync``1(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            <typeparam name="T"> Gets a subset of T</typeparam>
            </summary>
            <param name="numberOfRows">Number of rows</param>
            <param name="startRow">First row</param>
            <param name="field">you can sort by one field or by several separated by commas</param>
            <param name="timeout">Remote query timeout</param>
            <returns><typeparamref name="T"/>IEnumerable</returns>
            
        </member>
        <member name="M:SqlClientCoreTool.DataGather.Get``1(System.Int32,System.Int32)">
            <summary>
            Gets all or limited records from a table named equal to type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">Number of rows. Empty or (0) for all rows</param>
            <param name="timeout">Remote query timeout</param>
            <returns><typeparamref name="T"/> IEnumerable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetAsync``1(System.Int32,System.Int32)">
            <summary>
            Gets all or limited records from a table named equal to type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="limit">Number of rows. Empty or (0) for all rows</param>
            <param name="timeout">Remote query timeout</param>
            <returns><typeparamref name="T"/> IEnumerable</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetSingleValue(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Gets a single value from a cell in a table.
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns>Returns a single value, of type object, the product of a query to the database.</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.GetSingleValueAsync(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Gets a single value from a cell in a table.
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="timeout">Remote query timeout</param>
            <param name="parameters">Parameters list</param>
            <returns>Returns a single value, of type object, the product of a query to the database.</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.ChangeDbValues(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Update, delete, insert operations
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>        
            <param name="timeout">Remote query timeout</param>
            <param name="parameters"></param>
            <returns>Returns number of rows</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.ChangeDbValuesAsync(System.String,System.Boolean,System.Int32,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter})">
            <summary>
            Update, delete, insert operations
            </summary>
            <param name="query">T-SQL query</param>
            <param name="isProcedure">Specifies whether the query is a stored procedure or not</param>
            <param name="parameters">Stored procedure parameters</param>
            /// <param name="timeout">Operation tiemout</param>
            <returns>Returns number of rows affected</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.Update(System.Object,System.String)">
            <summary>
            Updates a record in the database. The table must have a primary key.
            </summary>
            <param name="obj"></param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Returns the number of rows updated.</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.UpdateAsync(System.Object,System.String)">
            <summary>
            Updates a record in the database. The table must have a primary key.
            </summary>
            <param name="obj">Object that contains fields to update. Its type has to match the name of the table to update</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Returns the number of rows updated</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.UpdateMany(System.Object,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter},System.String)">
            <summary>
            Updates all the record in the database that matchs filters name value pairs.
            </summary>
            <param name="obj">Object that contains fields to update. Its type has to match the name of the table to update</param>
            <param name="filter">Name value pair of fields to filter (where clause)</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Number of files updated</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.UpdateManyAsync(System.Object,System.Collections.Generic.List{SqlClientCoreTool.Classes.Parameter},System.String)">
            <summary>
            Updates all the record in the database that matchs filters name value pairs.
            </summary>
            <param name="obj">Object that contains fields to update. Its type has to match the name of the table to update</param>
            <param name="filter">Name value pair of fields to filter (where clause)</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Number of files updated</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.Insert(System.Object,System.String)">
            <summary>
            Inserts an object into the Table named as object type.
            </summary>
            <param name="obj">Its type has to match with the name of the table in the database</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns> if Table identity returns identity value else the number of inserted rows</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.InsertAsync(System.Object,System.String)">
            <summary>
            Inserts an object into the Table named as object type.
            </summary>
            <param name="obj">Its type has to match the name of the table in the database</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns> if Table identity returns identity value else the number of inserted rows</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.InsertList(System.Object,System.String)">
            <summary>
            Inserts a list of object into the Table named as object type.
            </summary>
            <param name="items">items to insert. Its type has to match with the name of the table in the database</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns> If Table identity and items list has only one object returns identity value else the number of inserted rows</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.InsertListAsync(System.Object,System.String)">
            <summary>
            Inserts a list of object into the Table named as object type.
            </summary>
            <param name="items">items to insert. Its type has to match with the name of the table in the database</param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns> If Table identity and items list has only one object returns identity value else the number of inserted rows</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.Delete(System.Object,System.String)">
            <summary>
            Deletes a row from the table named as the object type. The table must have a primary key.
            </summary>
            <param name="obj"></param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Returns the number of rows deleted</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.DeleteAsync(System.Object,System.String)">
            <summary>
            Deletes a row from the table named equal to the object type. The table must have a primary key.
            </summary>
            <param name="obj"></param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Returns the number of rows deleted</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.DeleteRange(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Removes a range of objects from the table named as object type. The table must have primary key.
            </summary>
            <param name="objs"></param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Number of files deleted</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.DeleteRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Removes a range of objects from the table named as object type. The table must have primary key
            </summary>
            <param name="objs"></param>
            <param name="tableName">Fill it in if tableName is diferent to obj type name</param>
            <returns>Number of files deleted</returns>
        </member>
        <member name="M:SqlClientCoreTool.DataGather.ExecuteScriptExclusiveMode(System.String,System.String,System.Int32)">
            <summary>
            Execute script in single user mode.
            </summary>
            <param name="databaseName">Database where query should be excecuted</param>
            <param name="script">Scritp to execute</param>
            <param name="timeOut">Operation timeout</param>
            <returns>Error message</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SqlClientCoreTool.Check">
            <summary>
            Groups several methods to check database, tables, connection, etc.
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.Check.CheckConnection(System.String,System.String)">
            <summary>
            Checks connectionstring in the configuration file.
            </summary>
            <param name="connectionString">A Connectionstring obtained from config, setting, etc.</param>
            <param name="databaseName">Optional: database name</param>
            <returns>Database name if exists</returns>
        </member>
        <member name="M:SqlClientCoreTool.Check.CheckConnectionAsync(System.String,System.String)">
            <summary>
            Check connectionstring in the configuration file.
            </summary>
            <param name="connectionString">A Connectionstring obtained from config, setting, etc.</param>
            <param name="databaseName">Optional: database name</param>
            <returns>Database name if exists</returns>
        </member>
        <member name="M:SqlClientCoreTool.Check.GetCurrentDataBase(SqlClientCoreTool.DataGather)">
            <summary>
            Gets the current connected database.
            </summary>
            <param name="dg"></param>
            <returns>Current Database name</returns>
        </member>
        <member name="M:SqlClientCoreTool.Check.GetCurrentServer(SqlClientCoreTool.DataGather)">
            <summary>
            Gets the current connected server.
            </summary>
            <param name="dg"></param>
            <returns>Current server name</returns>
        </member>
        <member name="M:SqlClientCoreTool.Check.CheckLinkedServers(System.String,System.String)">
            <summary>
            Check id there is a connection to a linked servers.
            </summary>
            <param name="connectionString">A Connectionstring obtained from config, setting, etc.</param>
            <param name="serverName"></param>
            <returns>Linked server name if exists</returns>
        </member>
        <member name="M:SqlClientCoreTool.Check.CheckTableExist(System.String,System.String)">
            <summary>
            Check if table exist.
            </summary>
            <param name="connectionString">A Connectionstring obtained from config, setting, etc.</param>
            <param name="tableName"></param>
            <returns>Table name</returns>
        </member>
        <member name="T:SqlClientCoreTool.Utils.DataBaseBackup">
            <summary>
            Database backup util.
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.Utils.DataBaseBackup.GetLastDatabaseBackup(System.String,System.String)">
            <summary>
            Gets last Database backupt date.
            </summary>
            <param name="dbname">Database name</param>
            <param name="connectionString"></param>
            <returns>DateTime</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.DataBaseBackup.GetLastDatabaseBackup(SqlClientCoreTool.DataGather)">
            <summary>
            Gets last Database backupt date.
            </summary>
            <param name="dataGather">Datagather</param>
            <returns>Last database date. Null if never a backup has been created</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.DataBaseBackup.RestoreDatabaseWithMove(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Restore Database with MOVE RECOVERY REPLACE
            </summary>
            <param name="connectionString">Target connectionstring</param>
            <param name="databaseName">Database name to restore</param>
            <param name="sourcePath">Full path .bak</param>
            <param name="mdfName">Mdf Name</param>
            <param name="mdfFile">Full path .mdf</param>
            <param name="logName">Log Name</param>
            <param name="logFile">Full path .ldf</param>
            <param name="timeOut">Operation timeout</param>
            <returns>If error returns exception message.</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.DataBaseBackup.BackUpDatabaseWithCompression(System.String,System.String,System.String,System.Int32)">
            <summary>
            Backup database with COMPRESSION.
            </summary>
            <param name="connectionString">Source connectionstring</param>
            <param name="databaseName">Database to backup</param>
            <param name="targetPath">Full target path /{filename}.bak</param>
            <param name="timeOut">Operation timeout</param>
            <returns>If error returns exception message.</returns>
        </member>
        <member name="T:SqlClientCoreTool.Utils.SessionLog">
            <summary>
            Methods to manage SCCT_SessionLog table.
            Examples: https://sqlcct.acernuda.com
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.GetInstance(System.String)">
            <summary>
            Creates an instance of SessionLog
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.Insert(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            If SCCT_SessionLog doesn't exist creates it and insert a record.
            Special permission are needed on database to create a table. 
            If user in ConnectionString doesn't have it you can previously create a table.
            Script to create the table, available in https://sqlcct.acernuda.com
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationDate"></param>
            <returns>returns the number of rows inserted</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.InsertAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            If SCCT_SessionLog doesn't exist creates it and insert a record.
            Special permission are needed on database to create a table. 
            If user in ConnectionString doesn't have it you can previously create a table.
            Script to create the table, available in https://sqlcct.acernuda.com
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationDate"></param>
            <returns>returns the number of rows inserted</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.Insert(System.String,System.String,SqlClientCoreTool.Utils.Period)">
            <summary>
            If SCCT_SessionLog doesn't exist creates it and insert a record.
            Special permission are needed on database to create a table. 
            If user in ConnectionString doesn't have it you can previously create a table.
            Script to create the table, available in https://sqlcct.acernuda.com
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="period">Period is a enum with several preset periods</param>
            <returns>returns the number of rows inserted</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.InsertAsync(System.String,System.String,SqlClientCoreTool.Utils.Period)">
            <summary>
            If SCCT_SessionLog doesn't exist creates it and insert a record.
            Special permission are needed on database to create a table. 
            If user in ConnectionString doesn't have it you can previously create a table.
            Script to create the table, available in https://sqlcct.acernuda.com
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="period">Period is a enum with several preset periods</param>
            <returns>returns the number of rows inserted</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.Get(System.String)">
            <summary>
            Gets all rows for a key
            </summary>
            <param name="key"></param>
            <returns>IEnumerable of Classes.SCCT_SessionLog</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.SessionLog.GetAsync(System.String)">
            <summary>
            Gets all rows for a key
            </summary>
            <param name="key"></param>
            <returns>IEnumerable of Classes.SCCT_SessionLog</returns>
        </member>
        <member name="T:SqlClientCoreTool.Utils.Transformer">
            <summary>
            Object transformer.
            </summary>
        </member>
        <member name="M:SqlClientCoreTool.Utils.Transformer.GetListFromDataTable``1(System.Data.DataTable)">
            <summary>
            Gets a List<typeparamref name="T"/> from a Datatable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns>List<typeparamref name="T"/></returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.Transformer.GetListFromDataTableAsync``1(System.Data.DataTable)">
            <summary>
            Gets a List<typeparamref name="T"/> from a Datatable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns>List<typeparamref name="T"/></returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.Transformer.CreateBlobFile(System.String)">
            <summary>
            Converts any images, documents, etc, to varbinary(Max) to store in Database
            </summary>
            <param name="path">File path</param>
            <returns>A BlobFile Class. The property FileData stores a byte[] that can be saved in Database as varbinary(max) type.</returns>
        </member>
        <member name="M:SqlClientCoreTool.Utils.Transformer.CreateBlobFileAsync(System.String)">
            <summary>
            Converts any images, documents, etc, to varbinary(Max) to store in Database
            </summary>
            <param name="path">File path</param>
            <returns>A BlobFile Class. The property FileData stores a byte[] that can be saved in Database as varbinary(max) type.</returns>
        </member>
    </members>
</doc>
